{:title "Logging interim results in thread macros"
 :layout :post
 :tags ["clojure"]
 :toc false}

### 

Thread macros are a familiar part of any Clojure codebase. They are a useful innovation 
that contribute towards readability improvements over deeply nested code as well as a 
visual idiom that have found home in other modern languages e.g. 
[Elixir](https://github.com/chrismccord/elixir_express/blob/master/basics/06_pipeline_operator.md). 
When i started with Clojure, it took me a while to get used to them but now i've 
grown fond of them, enough to often sprinkle my code quite liberally with them.

Once my thread macro invications started getting moderately complex, i ran into the 
need to introspect intermediate results e.g. here's a dead-simple example tha will be 
used for illustration
```
(->> [1 2 3 4 5]
     (filter odd?)
     (sum))

> 9 ;; sum of [1 3 5]
```
Suppose we wanted to find out the value returned by Step 2 i.e. `(filter odd?)`. 
Usually, we'd log it or def it. But what form does a logging capability look like when 
used inside a threading macro context? At the very basic, we need a function that returns 
the value it has been passed and as a side-effect, prints it to the output stream. A minimal 
function for that might look like
```
(defn thread-log [in]
  (println in)
  in)
```

With this hand-rolled minimal logging function ready to be inserted at any point of a 
thread macro invocation, we are ready to inspect any step of the overall computation 
e.g.
```
(->> [1 2 3 4 5]
     (filter odd?)
     (thread-log)
     (sum)

> [1 3 5] ;; (filter odd? [1 2 3 4 5]
> 9 ;; sum of [1 3 5]
```

If you're using [timbre](https://github.com/ptaoussanis/timbre) for your logging needs, 
it 
already provides this out-of-the-box with it's 
[log/spy](http://ptaoussanis.github.io/timbre/taoensso.timbre.html#var-spy) macro. 
But as shown above, you can start off with the most prosaic function and add to that as 
needed.

